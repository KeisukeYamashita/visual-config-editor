{"version":3,"sources":["state/Hooks.tsx","components/containers/CreateNewContainer.tsx","mappings/ExecutorMapping.tsx","icons/ExecutorIcon.tsx","components/atoms/summaries/ExecutorSummary.tsx","components/containers/inspector/ExecutorInspector.tsx","components/containers/inspector/JobInspector.tsx","icons/JobIcon.tsx","mappings/JobMapping.tsx","components/atoms/nodes/JobNode.tsx","components/atoms/summaries/JobSummary.tsx","mappings/ComponentMapping.tsx","components/atoms/Definition.tsx","components/containers/DefinitionsContainer.tsx","components/containers/InspectorContainer.tsx","components/panes/DefinitionsPane.tsx","components/panes/EditorPane.tsx","components/containers/WorkflowContainer.tsx","components/panes/WorkflowsPane.tsx","state/Store.tsx","App.tsx","index.tsx"],"names":["typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","CreateNew","inspecting","state","inspect","actions","configData","dataType","add","store","error","definitions","className","mode","name","singular","onClick","initialValues","defaults","enableReinitialize","onSubmit","values","transform","data","undefined","components","inspector","getInspector","subtypes","docker","executor","DockerExecutor","image","resourceClass","machine","MachineExecutor","macos","MacOSExecutor","xcode","windows","WindowsExecutor","type","ExecutorMapping","plural","get","executors","defineExecutor","update","updateExecutor","remove","undefineExecutor","dragTarget","applyToNode","nodeData","oldJob","job","Job","steps","icon","props","viewBox","id","d","cx","cy","r","summary","handleChange","handleSubmit","resourceClasses","fields","required","value","as","Object","keys","map","subtype","onChange","JobInspector","handleBlur","commandProps","none","text","hidden","run","command","parameters","generate","commands","Run","step","checkout","Checkout","persist_to_workspace","workspace","Persist","root","paths","path","attach_workspace","Attach","store_artifacts","StoreArtifacts","store_test_results","StoreTestResults","save_cache","cache","Save","key","when","addCommand","arrayHelper","newCommandType","newStep","push","JSON","stringify","render","cmd","JobIcon","JobMapping","parse","jobs","defineJob","updateJob","undefineJob","node","component","elements","workflows","selectedWorkflow","setWorkflowElements","updateWorkflowJob","workflowJob","applyToData","element","isNode","onConnect","params","targetJob","find","target","addEdge","animated","style","stroke","strokeWidth","requires","onDragOver","e","dataTransfer","types","includes","preventDefault","onDrop","transfer","getData","componentToType","old","new","isConnectable","position","Position","Left","borderRadius","Right","dataMappings","foundType","forEach","mapping","Definition","Summary","draggable","onDragStart","setData","DefintionsContainer","items","triggerClassName","triggerOpenedClassName","transitionTime","trigger","iconComponent","Icon","getIcon","item","InspectorPane","DefintionsPane","defs","updateConfig","generateConfig","DefinitionsContainer","href","config","Config","addJob","flow","workflow","Workflow","addWorkflow","EditorPane","theme","defaultLanguage","defaultValue","yml","matchSDKComment","match","index","endOfSDKComment","length","substring","configYAML","WorkflowPane","addWorkflowElement","curTransform","x","y","zoom","pos","clientX","clientY","gap","round","val","Math","floor","workflowNode","connectable","v4","onMove","selectNodesOnDrag","nodeTypes","assign","snapToGrid","variant","BackgroundVariant","Dots","color","bgClassName","size","WorkflowsTabbed","selectWorkflow","onSelect","selectedClassName","Actions","action","payload","concat","removeWorkflow","filter","removeWorkflowElement","console","Store","App","createStore","split","defaultSize","resizerClassName","minSize","DefinitionsPane","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04d6ef9d.chunk.js","sourcesContent":["import { createTypedHooks } from 'easy-peasy';\nimport { StoreActions, StoreModel } from './Store';\n\nconst typedHooks = createTypedHooks<StoreModel & StoreActions>();\n\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import { Formik } from 'formik';\nimport { useStoreActions, useStoreState } from '../../state/Hooks';\n\nexport interface CreateNewProps {\n  inspector: React.FunctionComponent;\n}\n\nconst CreateNew = () => {\n  const inspecting = useStoreState((state) => state.inspecting);\n  const inspect = useStoreActions((actions) => actions.inspect);\n  const configData = inspecting.dataType;\n  const add = useStoreActions(\n    (actions) => configData?.store.add(actions) || actions.error,\n  );\n  const definitions = useStoreState((state) => state.definitions);\n\n  const getInspector = () => {\n    if (configData) {\n      return (\n        <Formik\n          initialValues={configData.defaults}\n          enableReinitialize={true}\n          onSubmit={(values) => {\n            add(configData.transform(values));\n            inspect({ mode: 'none', data: undefined, dataType: undefined });\n          }}\n        >\n          {configData.components.inspector(definitions)}\n        </Formik>\n      );\n    }\n  };\n\n  return (\n    <div\n      className={\n        inspecting?.mode !== 'creating'\n          ? 'hidden'\n          : '' +\n            'absolute w-full h-full flex items-center justify-center bg-opacity-75 bg-black z-50 transition-all'\n      }\n    >\n      <div className=\"bg-circle-gray-100 rounded-lg w-max \">\n        <div className=\"w-full h-14 bg-circle-green rounded-t-lg float-left p-2 mb-2\">\n          <h1 className=\"float-left ml-2 mt-1 text-white font-semibold text-2xl mr-4\">\n            Create New {inspecting?.dataType?.name.singular}\n          </h1>\n          <button\n            onClick={() => inspect({ mode: 'none' })}\n            className=\"pl-2 mt-1 pr-2 rounded-full float-right text-none text-2xl transition-colors hover:bg-circle-red\"\n          >\n            X\n          </button>\n        </div>\n\n        <div className=\"p-3\">{getInspector()}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateNew;\n","import { executor, Job } from '@circleci/circleci-config-sdk';\nimport { AbstractExecutor } from '@circleci/circleci-config-sdk/dist/src/lib/Components/Executor/Executor';\nimport ExecutorInspector from '../components/containers/inspector/ExecutorInspector';\nimport ExecutorSummary from '../components/atoms/summaries/ExecutorSummary';\nimport ExecutorIcon from '../icons/ExecutorIcon';\nimport ComponentMapping from './ComponentMapping';\nimport { WorkflowJob } from './JobMapping';\n\nexport type AnyExecutor =\n  | executor.DockerExecutor\n  | executor.MacOSExecutor\n  | executor.MachineExecutor\n  | executor.WindowsExecutor\n  | AbstractExecutor;\n\nexport type ReusableExecutor = {\n  name: string;\n  executor: AnyExecutor;\n  type: string;\n};\n\nconst transform = (values: any) => {\n  const subtypes: { [type: string]: () => AnyExecutor } = {\n    docker: () =>\n      new executor.DockerExecutor(\n        values.executor.image.image || 'cimg/base:stable',\n        values.executor.resourceClass,\n      ),\n    machine: () =>\n      new executor.MachineExecutor(\n        values.executor.resourceClass,\n        values.executor.image || 'cimg/base:latest',\n      ),\n    macos: () =>\n      new executor.MacOSExecutor(\n        values.executor.xcode,\n        values.executor.resourceClass,\n      ),\n    windows: () =>\n      new executor.WindowsExecutor(\n        values.executor.image,\n        values.executor.resourceClass,\n      ),\n  };\n\n  return {\n    name: values.name,\n    executor: subtypes[values.type](),\n    type: 'docker',\n  };\n};\n\nconst ExecutorMapping = (): ComponentMapping<ReusableExecutor, WorkflowJob> => {\n  return {\n    type: 'executor',\n    name: {\n      singular: 'Executor',\n      plural: 'Executors',\n    },\n    defaults: {\n      name: 'New Executor',\n      type: 'docker',\n      executor: {\n        image: {\n          image: 'cimg/base:stable',\n        },\n      },\n    },\n    transform: transform,\n    store: {\n      get: (state) => state.definitions.executors,\n      add: (actions) => actions.defineExecutor,\n      update: (actions) => actions.updateExecutor,\n      remove: (actions) => actions.undefineExecutor,\n    },\n    dragTarget: 'job',\n    applyToNode: (data, nodeData) => {\n      const oldJob = nodeData.job;\n\n      return {\n        job: new Job(\n          oldJob.name,\n          transform({ ...data }).executor,\n          oldJob.steps,\n        ),\n      };\n    },\n    components: {\n      icon: ExecutorIcon,\n      summary: ExecutorSummary,\n      inspector: ExecutorInspector,\n    },\n  };\n};\n\nexport default ExecutorMapping();\n","import { IconProps } from './IconProps';\n\nconst ExecutorIcon = (props: IconProps) => (\n  <svg viewBox=\"0 0 96 96\" className={props.className}>\n    <g id=\"Layer_1\" data-name=\"Layer 1\">\n      <path d=\"M85.93,30h-76a6,6,0,0,1-6-6V12a6,6,0,0,1,6-6h76a6,6,0,0,1,6,6V24A6,6,0,0,1,85.93,30Zm-76-20a2,2,0,0,0-2,2V24a2,2,0,0,0,2,2h76a2,2,0,0,0,2-2V12a2,2,0,0,0-2-2Z\" />\n      <path d=\"M85.93,90h-76a6,6,0,0,1-6-6V72a6,6,0,0,1,6-6h76a6,6,0,0,1,6,6V84A6,6,0,0,1,85.93,90Zm-76-20a2,2,0,0,0-2,2V84a2,2,0,0,0,2,2h76a2,2,0,0,0,2-2V72a2,2,0,0,0-2-2Z\" />\n      <path d=\"M85.93,60h-76a6,6,0,0,1-6-6V42a6,6,0,0,1,6-6h76a6,6,0,0,1,6,6V54A6,6,0,0,1,85.93,60Zm-76-20a2,2,0,0,0-2,2V54a2,2,0,0,0,2,2h76a2,2,0,0,0,2-2V42a2,2,0,0,0-2-2Z\" />\n      <circle cx=\"19.93\" cy=\"18\" r=\"4\" />\n      <circle cx=\"19.93\" cy=\"48\" r=\"4\" />\n      <circle cx=\"19.93\" cy=\"78\" r=\"4\" />\n      <path d=\"M77.93,20h-48a2,2,0,0,1,0-4h48a2,2,0,0,1,0,4Z\" />\n      <path d=\"M77.93,50h-48a2,2,0,0,1,0-4h48a2,2,0,0,1,0,4Z\" />\n      <path d=\"M77.93,80h-48a2,2,0,0,1,0-4h48a2,2,0,0,1,0,4Z\" />\n    </g>\n  </svg>\n);\n\nexport default ExecutorIcon;\n","import { ReusableExecutor } from '../../../mappings/ExecutorMapping';\n\nconst ExecutorSummary: React.FunctionComponent<{ data: ReusableExecutor }> = (\n  props,\n) => {\n  return (\n    <div>\n      {props.data.name} {props.data.executor.resourceClass}\n    </div>\n  );\n};\n\nexport default ExecutorSummary;\n","import { Field, Form, FormikValues } from 'formik';\nimport { ReactElement } from 'react'; \nimport { ReusableExecutor } from '../../../mappings/ExecutorMapping';\nimport { DefinitionModel } from '../../../state/Store';\n\nconst ExecutorInspector =\n  (definitions: DefinitionModel) =>\n  ({\n    values,\n    handleChange,\n    handleSubmit,\n  }: FormikValues & { data: ReusableExecutor }) => {\n    const subtypes: {\n      [K: string]: {\n        name: string;\n        fields: ReactElement;\n        resourceClasses: string[];\n      };\n    } = {\n      docker: {\n        name: 'Docker',\n        resourceClasses: [\n          'small',\n          'medium',\n          'medium+',\n          'large',\n          'xlarge',\n          '2xlarge',\n          '2xlarge+',\n        ],\n        fields: (\n          <div>\n            Image:{' '}\n            <Field\n              required\n              name=\"executor.image.image\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n      },\n      machine: {\n        name: 'Machine',\n        resourceClasses: ['medium', 'large', 'xlarge', '2xlarge'],\n        fields: (\n          <div>\n            Image:{' '}\n            <Field\n              required\n              name=\"executor.image\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n      },\n      macos: {\n        name: 'MacOS',\n        resourceClasses: ['medium', 'large'],\n        fields: (\n          <div>\n            Xcode:{' '}\n            <Field\n              required\n              name=\"executor.xcode\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n      },\n      windows: {\n        name: 'Windows',\n        resourceClasses: ['medium', 'large', 'xlarge', '2xlarge'],\n        fields: (\n          <div>\n            Image:{' '}\n            <Field\n              required\n              name=\"executor.image\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n      },\n    };\n\n    return (\n      <Form onSubmit={handleSubmit}>\n        Name:{' '}\n        <Field\n          name=\"name\"\n          required\n          className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n          value={values.name}\n        />\n        <br />\n        Executor Type:{' '}\n        <Field\n          name=\"type\"\n          required\n          className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n          as=\"select\"\n        >\n          {Object.keys(subtypes).map((subtype) => (\n            <option value={subtype} key={subtype}>\n              {subtypes[subtype].name}\n            </option>\n          ))}\n        </Field>\n        <br />\n        Resource Class:{' '}\n        <Field\n          as=\"select\"\n          name=\"executor.resourceClass\"\n          className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n          onChange={handleChange}\n        >\n          {subtypes[values.type]?.resourceClasses?.map((resourceClass) => (\n            <option value={resourceClass} key={resourceClass}>\n              {resourceClass}\n            </option>\n          ))}\n        </Field>\n        <br />\n        {subtypes[values.type]?.fields}\n        <br />\n        <button\n          type=\"submit\"\n          className=\"p-1 font-bold w-full text-white border-circle-gray-300 bg-circle-blue rounded-lg\"\n        >\n          Save\n        </button>\n      </Form>\n    );\n  };\n\nexport default ExecutorInspector;\n","import { commands, Job } from '@circleci/circleci-config-sdk';\nimport { Command } from '@circleci/circleci-config-sdk/dist/src/lib/Components/Commands/Command';\nimport { ArrayHelpers, Field, FieldArray, Form, FormikValues } from 'formik';\nimport { ReactElement } from 'react';\nimport { DefinitionModel } from '../../../state/Store';\n\nconst JobInspector =\n  (definitions: DefinitionModel) =>\n  ({\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n  }: FormikValues & { data: Job }) => {\n    const commandProps: {\n      [command: string]: {\n        text: string;\n        summary?: (command: any) => ReactElement;\n        fields: ReactElement;\n        // step is values passed in. Can be previous job or new job\n        generate?: () => Command;\n      };\n    } = {\n      none: {\n        text: 'Select a command type',\n        fields: <div hidden />,\n      },\n      run: {\n        text: 'Run a command',\n        summary: (command) => (\n          <p className=\"inline\">{command.parameters.command}</p>\n        ),\n        fields: (\n          <div>\n            Command{' '}\n            <Field\n              required\n              name=\"step.parameters.command\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n            <br />\n            Shell{' '}\n            <Field\n              name=\"step.parameters.shell\"\n              className=\"p-1 w-full border-circle-gray-300 border-2 rounded\"\n            ></Field>\n            <br />\n            Background{' '}\n            <Field\n              type=\"checkbox\"\n              name=\"step.parameters.background\"\n              className=\"p-1 border-circle-gray-300 border-2 rounded\"\n            ></Field>\n            <br />\n            Working Directory{' '}\n            <Field\n              name=\"step.parameters.working_directory\"\n              className=\"p-1 w-full border-circle-gray-300 border-2 rounded\"\n            ></Field>\n            <br />\n            No Output Timeout:{' '}\n            <Field\n              name=\"step.parameters.no_output_timeout\"\n              className=\"p-1 w-full border-circle-gray-300 border-2 rounded\"\n            ></Field>\n            <br />\n            When{' '}\n            <Field\n              as=\"select\"\n              name=\"step.parameters.when\"\n              className=\"p-1 w-full border-circle-gray-300 border-2 rounded\"\n            >\n              <option value=\"always\">Always</option>\n              <option value=\"on_success\">On Success</option>\n              <option value=\"on_fail\">On Fail</option>\n            </Field>\n          </div>\n        ),\n        generate: () => new commands.Run({ ...values.step.parameters }),\n      },\n      checkout: {\n        text: 'Checkout',\n        fields: (\n          <div>\n            Path:{' '}\n            <Field\n              name=\"step.parameters.path\"\n              className=\"p-1 w-full border-circle-gray-300 border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n        generate: () => new commands.Checkout({ ...values.step.parameters }),\n      },\n      persist_to_workspace: {\n        text: 'Persist To Workspace',\n        fields: (\n          <div>\n            Root:{' '}\n            <Field\n              required\n              name=\"step.parameters.root\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n            <br />\n            Path:{' '}\n            <Field\n              required\n              name=\"step.parameters.path\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n        generate: () =>\n          new commands.workspace.Persist({\n            root: values.step.parameters.root,\n            paths: [values.step.parameters.path],\n          }),\n      },\n      attach_workspace: {\n        text: 'Attach Workspace',\n        fields: (\n          <div>\n            At:{' '}\n            <Field\n              required\n              name=\"step.parameters.at\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n        generate: () =>\n          new commands.workspace.Attach({ ...values.step.parameters }),\n      },\n      store_artifacts: {\n        text: 'Store Artifacts',\n        fields: (\n          <div>\n            Path:{' '}\n            <Field\n              required\n              name=\"step.parameters.path\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n            <br />\n            Destination:{' '}\n            <Field\n              name=\"step.parameters.destination\"\n              className=\"p-1 w-full border-circle-gray-300 border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n        generate: () =>\n          new commands.StoreArtifacts({ ...values.step.parameters }),\n      },\n      store_test_results: {\n        text: 'Store Test Results',\n        fields: (\n          <div>\n            Path{' '}\n            <Field\n              required\n              name=\"step.parameters.path\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n          </div>\n        ),\n        generate: () =>\n          new commands.StoreTestResults({ ...values.step.parameters }),\n      },\n      save_cache: {\n        text: 'Save Cache',\n        fields: (\n          <div>\n            Path{' '}\n            <Field\n              required\n              name=\"step.parameters.path\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n            <br />\n            Key{' '}\n            <Field\n              required\n              name=\"step.parameters.key\"\n              className=\"p-1 w-full border-circle-light-blue border-2 rounded\"\n            ></Field>\n            <br />\n            When{' '}\n            <Field as=\"select\" name=\"step.parameters.when\">\n              <option value=\"always\">Always</option>\n              <option value=\"on_success\">On Success</option>\n              <option value=\"on_fail\">On Fail</option>\n            </Field>\n          </div>\n        ),\n        generate: () =>\n          new commands.cache.Save({\n            paths: [values.step.parameters.path],\n            key: values.step.parameters.key,\n            when: values.step.parameters.when,\n          }),\n      },\n    };\n\n    const addCommand = (arrayHelper: ArrayHelpers) => {\n      const generate = commandProps[values.newCommandType || 'none'].generate;\n\n      if (generate) {\n        return (\n          <div>\n            <h1 className=\"text-lg m-2 pl-4 border-b-4 border-circle-gray-400 mx-auto\">\n              Configure Command Parameters\n            </h1>\n            {commandProps[values.newCommandType].fields}\n            <br />\n            <button\n              type=\"button\"\n              className=\"px-2 py-0 font-bold text-white w-full bg-circle-blue rounded-lg\"\n              onClick={() => {\n                const newStep = generate();\n\n                // reset the values properties\n                values.step = { parameters: {} };\n                values.newCommandType = 'none';\n\n                // push new step to job, also refreshes container with reset properties\n                arrayHelper.push(newStep);\n              }}\n            >\n              Add Step\n            </button>\n          </div>\n        );\n      }\n    };\n\n    return (\n      <Form onSubmit={handleSubmit}>\n        Name{' '}\n        <Field\n          className=\"p-1 w-full border-circle-blue-light border-2 rounded\"\n          name=\"name\"\n          value={values.name}\n        />\n        <br />\n        Executor{' '}\n        <Field\n          name=\"executor\"\n          className=\"p-1 w-full border-circle-blue-light border-2 rounded\"\n          as=\"select\"\n        >\n          <option value=\"undefined\" key=\"undefined\">\n            Select Executor\n          </option>\n          {definitions.executors?.map((executor) => (\n            <option value={JSON.stringify(executor)} key={executor.name}>\n              {executor.name}\n            </option>\n          ))}\n        </Field>\n        <FieldArray\n          name=\"steps\"\n          render={(arrayHelper) => (\n            <div>\n              {values.steps?.map((cmd: Command) => {\n                const summary = commandProps[cmd.name].summary;\n\n                if (summary) {\n                  return (\n                    <div>\n                      {cmd.name}: {summary(cmd)}\n                    </div>\n                  );\n                } else {\n                  return <div>{cmd.name}</div>;\n                }\n              })}\n              Add Step{' '}\n              <Field\n                as=\"select\"\n                name=\"newCommandType\"\n                className=\"p-1 w-full border-circle-gray-300 border-2 rounded\"\n              >\n                {Object.keys(commandProps).map((cmd) => (\n                  <option value={cmd} key={cmd}>\n                    {commandProps[cmd].text}\n                  </option>\n                ))}\n              </Field>\n              {addCommand(arrayHelper)}\n            </div>\n          )}\n        />\n        <br />\n        <button\n          type=\"submit\"\n          className=\"p-1 font-bold w-full text-white border-circle-gray-300 bg-circle-blue rounded-lg\"\n        >\n          Save\n        </button>\n      </Form>\n    );\n  };\n\nexport default JobInspector;\n","import { IconProps } from './IconProps';\n\nconst JobIcon = (props: IconProps) => (\n  <svg viewBox=\"0 0 24 24\" className={props.className}>\n    <path d=\"M12.458388,3 C17.7284428,3 22,7.25487688 22,12.5009275 C22,17.7469783 17.7286827,22 12.458388,22 C9.24779218,22 6.40748266,20.4195905 4.67890641,17.9975161 L4.51046025,18 C5.52650577,18 6.4784703,17.7267799 7.29630887,17.2500927 C8.5797622,18.6332003 10.4175246,19.5 12.4581919,19.5 C16.3422622,19.5 19.4895397,16.3667214 19.4895397,12.5010252 C19.4895397,8.63532901 16.3417423,5.5 12.4581919,5.5 C10.4182181,5.5 8.58077831,6.36686635 7.29682565,7.75083018 C6.52574446,7.30040157 5.63375878,7.03136434 4.68109466,7.00257493 C6.40892952,4.58026814 9.24869152,3 12.458388,3 Z M12.4596333,9.00000001 C14.4011972,9.00000001 15.9748954,10.5675188 15.9748954,12.5003076 C15.9748954,14.4330964 14.4012513,16 12.4596333,16 C11.2973265,16 10.266758,15.437833 9.62706371,14.5716975 C9.88962048,13.931837 10.0334728,13.2326478 10.0334728,12.5 C10.0334728,11.767055 9.88950371,11.0675956 9.62819064,10.4281361 C10.2669454,9.56228031 11.2974499,9.00000001 12.4596333,9.00000001 Z M4.50987191,10 C5.89718507,10 7.0209205,11.1200937 7.0209205,12.5002929 C7.0209205,13.8804921 5.89718507,15 4.50987191,15 C3.12373543,15 2,13.8804921 2,12.5002929 C2,11.1200937 3.12373543,10 4.50987191,10 Z\" />\n  </svg>\n);\n\nexport default JobIcon;\n","import { Job } from '@circleci/circleci-config-sdk';\nimport { WorkflowJobParameters } from '@circleci/circleci-config-sdk/dist/src/lib/Components/Workflow/Workflow';\nimport JobInspector from '../components/containers/inspector/JobInspector';\nimport JobNode from '../components/atoms/nodes/JobNode';\nimport JobSummary from '../components/atoms/summaries/JobSummary';\nimport JobIcon from '../icons/JobIcon';\nimport ComponentMapping from './ComponentMapping';\nimport ExecutorMapping from './ExecutorMapping';\n\nexport interface WorkflowJob {\n  job: Job;\n  parameters?: WorkflowJobParameters;\n}\n\nconst JobMapping = (): ComponentMapping<Job, WorkflowJob> => {\n  return {\n    type: 'job',\n    name: {\n      singular: 'Job',\n      plural: 'Jobs',\n    },\n    defaults: {\n      name: 'New Job',\n      executor: undefined,\n      steps: [],\n      step: { parameters: {} },\n    },\n    transform: (values) => {\n      return new Job(\n        values.name,\n        ExecutorMapping.transform({ ...JSON.parse(values.executor) }).executor,\n        values.steps,\n      );\n    },\n    store: {\n      get: (state) => {\n        return state.definitions.jobs;\n      },\n      add: (actions) => actions.defineJob,\n      update: (actions) => actions.updateJob,\n      remove: (actions) => actions.undefineJob,\n    },\n    dragTarget: 'workflow',\n    node: {\n      type: 'job',\n      transform: (data) => {\n        return { job: data };\n      },\n      component: JobNode,\n    },\n    components: {\n      icon: JobIcon,\n      summary: JobSummary,\n      inspector: JobInspector,\n    },\n  };\n};\n\nexport default JobMapping();\n","import { Job } from '@circleci/circleci-config-sdk';\nimport { WorkflowJobParameters } from '@circleci/circleci-config-sdk/dist/src/lib/Components/Workflow/Workflow';\nimport {\n  addEdge,\n  Connection,\n  Handle,\n  isNode,\n  NodeProps,\n  Position,\n} from 'react-flow-renderer';\nimport { componentToType } from '../../../mappings/ComponentMapping';\nimport { WorkflowJob } from '../../../mappings/JobMapping';\nimport JobIcon from '../../../icons/JobIcon';\nimport { useStoreActions, useStoreState } from '../../../state/Hooks';\n\nconst JobNode: React.FunctionComponent<NodeProps & { data: WorkflowJob }> = (\n  props,\n) => {\n  const elements = useStoreState(\n    (state) => state.workflows[state.selectedWorkflow].elements,\n  );\n  const setWorkflowElements = useStoreActions(\n    (actions) => actions.setWorkflowElements,\n  );\n  const updateJob = useStoreActions((actions) => actions.updateJob);\n\n  const updateWorkflowJob = (\n    workflowJob: WorkflowJob,\n    applyToData: { job?: Job; parameters?: WorkflowJobParameters },\n  ) =>\n    elements.map((element) =>\n      isNode(element) && element.data.job.name === workflowJob.job.name\n        ? { ...element, data: { ...workflowJob, ...applyToData } }\n        : element,\n    );\n\n  const onConnect = (params: Connection) => {\n    const targetJob = elements.find(\n      (element) => element.id === params.target,\n    )?.data;\n\n    setWorkflowElements(\n      addEdge(\n        {\n          ...params,\n          animated: false,\n          style: { stroke: '#A3A3A3', strokeWidth: '2px' },\n        },\n        updateWorkflowJob(targetJob, {\n          parameters: {\n            requires: [props.data.job.name],\n          },\n        }),\n      ),\n    );\n  };\n\n  return (\n    <div\n      className=\"p-3 bg-white text-black rounded-md border border-circle-gray-300\"\n      onDragOver={(e) => {\n        if (e.dataTransfer.types.includes('job')) {\n          e.preventDefault();\n        }\n      }}\n      onDrop={(e) => {\n        if (e.dataTransfer.types.includes('job')) {\n          const transfer: { type: string; data: any } = JSON.parse(\n            e.dataTransfer.getData('job'),\n          );\n          const type = componentToType(transfer.type);\n\n          if (transfer && type?.applyToNode) {\n            const applyToData = type.applyToNode(transfer.data, props.data);\n\n            if ('job' in applyToData) {\n              updateJob({ old: props.data.job, new: applyToData.job });\n            }\n\n            if ('parameters' in applyToData) {\n              updateWorkflowJob(props.data, applyToData);\n            }\n          }\n        }\n      }}\n    >\n      <Handle\n        type=\"target\"\n        isConnectable={true}\n        onConnect={onConnect}\n        position={Position.Left}\n        style={{ borderRadius: 0 }}\n      />\n      <div className=\"flex w-40\">\n        <JobIcon className=\"w-6 h-6 mr-2\" />\n        {props.data.parameters?.name || props.data.job.name}\n      </div>\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        onConnect={onConnect}\n        isConnectable={true}\n      />\n    </div>\n  );\n};\n\nexport default JobNode;\n","import { Job } from '@circleci/circleci-config-sdk';\n\nconst JobSummary: React.FunctionComponent<{ data: Job }> = (props) => {\n  return <div>{props.data.name}</div>;\n};\n\nexport default JobSummary;\n","import { executor, Job } from '@circleci/circleci-config-sdk';\nimport { ActionCreator, Actions, State } from 'easy-peasy';\nimport { FormikValues } from 'formik';\nimport { NodeProps } from 'react-flow-renderer';\nimport Store, { DefinitionModel, UpdateType } from '../state/Store';\nimport ExecutorMapping from './ExecutorMapping';\nimport JobMapping from './JobMapping';\n\n/**\n * Interface to add a circleci-config-sdk component to a data mapping.\n */\nexport interface DataMapping {\n  type: string;\n  component: any[];\n  dataType: ComponentMapping;\n}\n\n/**\n * Registry of circleci-config-sdk component to data maps.\n */\nconst dataMappings: DataMapping[] = [\n  {\n    type: 'executor',\n    component: [\n      executor.DockerExecutor,\n      executor.MacOSExecutor,\n      executor.MachineExecutor,\n      executor.WindowsExecutor,\n    ],\n    dataType: ExecutorMapping,\n  },\n  {\n    type: 'job',\n    component: [Job],\n    dataType: JobMapping,\n  },\n];\n\n/**\n * Utility function for converting a component into a mapping type.\n * @param {any} data:any \n * @returns {any}\n */\nconst componentToType = (data: any): ComponentMapping | undefined => {\n  let foundType = undefined;\n\n  dataMappings.forEach((mapping) => {\n    if (typeof data === 'string' && mapping.type === data) {\n      foundType = mapping.dataType;\n      return;\n    } else {\n      mapping.component.forEach((type) => {\n        if (data instanceof type) {\n          foundType = mapping.dataType;\n          return;\n        }\n      });\n    }\n  });\n\n  return foundType;\n};\n\nexport { componentToType, dataMappings };\n\ntype storeType = typeof Store;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\n\n/**\n * circleci-config-sdk Component to Data Mapping\n * \n * @interface \n */\nexport default interface ComponentMapping<\n  ConfigDataType = any,\n  ConfigNodeProps = any,\n  InspectorDefaults = any,\n  > {\n  /**  String name type of component. Must be equal to index within registry. */\n  type: string;\n  /**  Language values of component. This should be used for UI display only. */\n  name: {\n    singular: string;\n    plural: string;\n  };\n  /** Default values to populate inspectors\n   *  @todo need to add support for subtype defaults  \n   */\n  defaults: {\n    [K in KeysOfUnion<ConfigDataType | InspectorDefaults>]?: any;\n  };\n  /** Transform field values into an instance of ConfigDataType */\n  transform: (values: { [K: string]: any }) => ConfigDataType;\n  store: {\n    /** Returns easy-peasy state hook for component array */\n    get: (state: State<storeType>) => ConfigDataType[] | undefined;\n    /** Returns easy-peasy add action hook for component array */\n    add: (state: Actions<storeType>) => ActionCreator<ConfigDataType>;\n    /** Returns easy-peasy update action hook for data type */\n    update: (\n      state: Actions<storeType>,\n    ) => (data: UpdateType<ConfigDataType>) => void;\n    /** Returns easy-peasy removal action hook for data type */\n    remove: (state: Actions<storeType>) => (data: ConfigDataType) => void;\n  };\n  /**\n   * Name of target that a definition can be tragged to. \n   * Currently only 'workflow' or 'job'\n   */\n  dragTarget?: string;\n  /**\n   * Called from a node to apply datatype to the applied node\n   * @todo Potentially support multiple node types. \n   * @returns Object populated with values of ConfigNodeProps */\n  applyToNode?: (\n    data: ConfigDataType,\n    nodeData: ConfigNodeProps,\n  ) => { [K in KeysOfUnion<ConfigNodeProps>]?: any };\n  node?: {\n    type: string;\n    /** Transform definition data */\n    transform?: (data: ConfigDataType) => ConfigNodeProps;\n    /** @todo: Add store functionality to better support updating defintions and their corresponding workflow nodes */\n    component: React.FunctionComponent<{ data: ConfigNodeProps } & NodeProps>;\n  };\n  components: {\n    /** Icon Component to render in definition */\n    icon?: React.FunctionComponent<any>;\n    /** Component to render in definition */\n    summary: React.FunctionComponent<{ data: ConfigDataType }>;\n    /** \n     * Called by InspectorPane and CreateNew to generate form\n     * @returns Function which returns a Formik Form object*/\n    inspector: (\n      definitions: DefinitionModel,\n    ) => (props: FormikValues & { data: ConfigDataType }) => JSX.Element;\n  };\n}\n","import ComponentMapping from '../../mappings/ComponentMapping';\nimport { useStoreActions } from '../../state/Hooks';\n\nconst Definition = (props: { data: any; type: ComponentMapping }) => {\n  const Summary = props.type.components.summary;\n  const inspector = useStoreActions((actions) => actions.inspect);\n\n  return (\n    <button\n      className=\"w-full p-3 cursor-pointer text-left pl-10 text-circle-black bg-white border border-circle-gray-300 rounded-md\"\n      draggable=\"true\"\n      onDragStart={(e) => {\n        const type = props.type;\n\n        if (type?.dragTarget) {\n          let configData = props.data;\n\n          if (type.node?.transform) {\n            configData = type.node.transform(configData);\n          }\n\n          e.dataTransfer.setData(\n            type.dragTarget,\n            JSON.stringify({\n              type: type.node?.type || type.type,\n              data: configData,\n            }),\n          );\n        }\n      }}\n      onClick={(e) => {\n        inspector({ mode: 'editing', data: props.data, dataType: props.type });\n      }}\n    >\n      <Summary data={props.data} />\n    </button>\n  );\n};\n\nexport default Definition;\n","import Collapsible from 'react-collapsible';\nimport ComponentMapping from '../../mappings/ComponentMapping';\nimport { useStoreActions, useStoreState } from '../../state/Hooks';\nimport Definition from '../atoms/Definition';\n\nexport interface DefintionsProps {\n  type: ComponentMapping;\n}\n\nconst DefintionsContainer = (props: DefintionsProps) => {\n  const getIcon = () => {\n    let iconComponent = props.type.components.icon;\n\n    if (iconComponent) {\n      let Icon = iconComponent;\n\n      return <Icon className=\"ml-1 mr-3 w-8 h-8\" />;\n    }\n  };\n\n  const items = useStoreState(props.type.store.get);\n  const inspect = useStoreActions((actions) => actions.inspect);\n\n  return (\n    <div className=\"mb-4\">\n      <Collapsible\n        triggerClassName=\"text-circle-black shadow-md text-2xl hover:bg-circle-gray-100 p-2 block border border-circle-gray-300 bg-white duration:50 transition-all w-full rounded-md\"\n        triggerOpenedClassName=\"block border border-circle-gray-300 text-2xl p-2 shadow-md text-circle-black bg-white w-full transition rounded-t-md\"\n        transitionTime={50}\n        trigger={\n          <div className=\"flex \">\n            {getIcon()}\n            <p className=\"self-center\">{props.type.name.plural}</p>\n          </div>\n        }\n      >\n        {items?.map((item) => (\n          <div className=\"w-full p-2 bg-circle-gray-200\" key={item.name}>\n            <Definition data={item} type={props.type} />\n          </div>\n        ))}\n        <div className=\"w-full p-2\">\n          <button\n            onClick={() => inspect({ dataType: props.type, mode: 'creating' })}\n            className=\"p-1 w-full rounded-md text-white text-xl transition-colors hover:bg-circle-blue-light bg-circle-blue\"\n          >\n            Create {props.type.name.singular}\n          </button>\n        </div>\n      </Collapsible>\n    </div>\n  );\n};\n\nexport default DefintionsContainer;\n","import { Formik } from 'formik';\nimport { useStoreActions, useStoreState } from '../../state/Hooks';\n\nconst InspectorPane = () => {\n  const inspecting = useStoreState((state) => state.inspecting);\n  const configData = inspecting.dataType;\n  const update = useStoreActions(\n    (actions) => configData?.store.update(actions) || actions.error,\n  );\n  const definitions = useStoreState((state) => state.definitions);\n\n  const getInspector = () => {\n    if (configData) {\n      return (\n        <Formik\n          initialValues={{ ...configData.defaults, ...inspecting.data }}\n          enableReinitialize\n          onSubmit={(values) => {\n            update({ old: inspecting.data, new: configData.transform(values) });\n          }}\n        >\n          {configData.components.inspector(definitions)}\n        </Formik>\n      );\n    }\n  };\n\n  if (inspecting && inspecting.dataType && inspecting.mode === 'editing') {\n    return (\n      <div>\n        <div className=\"flex border-b border-circle-gray-300 m-2 mb-0\">\n          <h1 className=\"border-b-4 text-xl pb-2 pl-2 pr-2 w-max font-bold text-circle-black text-center border-circle-gray-500\">\n            INSPECTOR\n          </h1>\n        </div>\n        <div className=\"p-5 overflow-y-scroll\">{getInspector()}</div>\n      </div>\n    );\n  }\n  return <div hidden />;\n};\n\nexport default InspectorPane;\n","import { Config, Workflow } from '@circleci/circleci-config-sdk';\nimport { dataMappings } from '../../mappings/ComponentMapping';\nimport { useStoreActions, useStoreState } from '../../state/Hooks';\nimport DefinitionsContainer from '../containers/DefinitionsContainer';\nimport InspectorPane from '../containers/InspectorContainer';\n\n/**\n * @see\n * @returns\n */\nconst DefintionsPane = () => {\n  /* TODO: DETERMINE PARAMETERS\n  const parameters = useStoreState((state) => state.parameters); \n  const defineParameter = useStoreActions((actions) => actions.defineParameter); */\n  // const generateConfig = useStoreActions((actions) => actions.generateConfig);\n  const defs = useStoreState((state) => state.definitions);\n  const workflows = useStoreState((state) => state.workflows);\n  const updateConfig = useStoreActions((actions) => actions.generateConfig);\n\n  const generateConfig = () => {\n    const config = new Config(false, [], defs.workflows, defs.commands);\n\n    defs.jobs?.forEach((job) => {\n      config.addJob(job);\n    });\n\n    workflows.forEach((flow) => {\n      const workflow = new Workflow(flow.name);\n\n      flow.elements.forEach((element) => {\n        if (element.type === 'job') {\n          workflow.addJob(element.data.job, element.data.parameters);\n        }\n      });\n\n      config.addWorkflow(workflow);\n    });\n\n    updateConfig(config);\n  };\n\n  return (\n    <div className=\"h-full w-full pt-4 bg-circle-gray-200 flex flex-col overflow-y-auto\">\n      <div className=\"flex border-b border-circle-gray-300 m-2\">\n        <h1 className=\"border-b-4 text-xl pl-4 pr-4 pb-2 w-max font-bold text-circle-black text-center border-circle-gray-500\">\n          CONFIG DEFINITIONS\n        </h1>\n      </div>\n\n      <div className=\"flex-1 h-full flex-col p-5 \">\n        <div className=\"overflow-y-auto h-full mb-6 rounded-lg\">\n          {dataMappings.map((mapping) => {\n            const dataType = mapping.dataType;\n\n            return (\n              <DefinitionsContainer\n                type={dataType}\n                key={dataType.name.plural}\n              />\n            );\n          })}\n        </div>\n      </div>\n\n      <InspectorPane />\n\n      <header className=\"bg-circle-blue p-2 text-center m-auto text-white w-full rounded-lg\">\n        <h1>\n          Visual Config Editor alpha preview 0.1.0 - Features are subject to\n          changes\n        </h1>\n        <h1>\n          Find a bug or have any feedback? Please submit an{' '}\n          <i>\n            <a href=\"https://github.com/CircleCI-Public/visual-config-editor/issues\">\n              issue\n            </a>\n          </i>{' '}\n          on our GitHub repository.\n        </h1>\n      </header>\n\n      <div className=\"flex border-b border-circle-gray-300 mt-0 m-2\" />\n      <button\n        className=\"text-gray-100 text-2xl p-2 m-6 bg-circle-blue duration:50 transition-all rounded-lg\"\n        onClick={(e) => generateConfig()}\n      >\n        Generate config.yml\n      </button>\n    </div>\n  );\n};\n\nexport default DefintionsPane;\n","import Editor from '@monaco-editor/react';\nimport { useStoreState } from '../../state/Hooks';\n\nconst EditorPane = () => {\n  const config = useStoreState((state) => state.config);\n\n  const configYAML = () => {\n    const yml = config?.stringify();\n    const matchSDKComment = yml?.match('# SDK Version: .*\\n');\n\n    if (yml && matchSDKComment && matchSDKComment.index) {\n      const comment = `# VCE Version: 0.1.0\\n# Modeled with the CircleCI visual config editor.\\n# For more information, see https://github.com/CircleCI-Public/visual-config-editor\\n`;\n      const endOfSDKComment = matchSDKComment.index + matchSDKComment[0].length;\n\n      return (\n        yml.substring(0, endOfSDKComment) +\n        comment +\n        yml.substring(endOfSDKComment, yml.length)\n      );\n    }\n\n    return yml;\n  };\n\n  return (\n    <div className=\"bg-circle-gray-900 w-full h-full border-r-2 border-circle-green-light\">\n      <div className=\"inline-flex border-b text-xl pt-4 pb-0 border-circle-gray-800 w-full font-bold\">\n        <div className=\"border-b-4 pl-4 pr-4 pb-2 w-max text-white border-circle-green\">\n          CODE EDITOR\n        </div>\n      </div>\n      <Editor\n        theme=\"vs-dark\"\n        className=\"h-96\"\n        defaultLanguage=\"yaml\"\n        defaultValue=\"\"\n        value={configYAML()}\n      />\n    </div>\n  );\n};\n\nexport default EditorPane;\n","import ReactFlow, {\n  Background,\n  BackgroundVariant,\n  FlowTransform,\n  Node,\n  NodeTypesType,\n} from 'react-flow-renderer';\nimport { v4 } from 'uuid';\nimport { dataMappings } from '../../mappings/ComponentMapping';\nimport { useStoreActions, useStoreState } from '../../state/Hooks';\nimport { WorkflowModel } from '../../state/Store';\n\nexport interface ElementProps {\n  className?: string;\n  bgClassName?: string;\n  workflow: WorkflowModel;\n}\n\nconst getTypes = (): NodeTypesType =>\n  Object.assign(\n    {},\n    ...dataMappings.map((component) => {\n      const node = component.dataType.node;\n\n      if (node) {\n        return { [node.type]: node.component };\n      }\n\n      return null;\n    }),\n  );\n\nconst WorkflowPane = (props: ElementProps) => {\n  const elements = useStoreState(\n    (state) => state.workflows[state.selectedWorkflow].elements,\n  );\n  const addWorkflowElement = useStoreActions(\n    (actions) => actions.addWorkflowElement,\n  );\n  let curTransform: FlowTransform = { x: 0, y: 0, zoom: 1 };\n\n  const updateLocation = (transform?: FlowTransform) => {\n    if (transform) {\n      curTransform = transform;\n    }\n  };\n\n  const gap = 15;\n\n  return (\n    <div\n      className=\"w-full h-full\"\n      onDragOver={(e) => {\n        if (e.dataTransfer.types.includes('workflow')) {\n          e.preventDefault();\n        }\n      }}\n      onDrop={(e) => {\n        if (e.dataTransfer.types.includes('workflow')) {\n          const transfer = JSON.parse(e.dataTransfer.getData('workflow'));\n          const pos = {\n            x: e.clientX - gap - curTransform.x,\n            y: e.clientY - gap * 3 - curTransform.y,\n          };\n          const round = (val: number) =>\n            (Math.floor(val / gap) * gap) / curTransform.zoom;\n\n          if (transfer) {\n            const workflowNode: Node<any> = {\n              data: transfer.data,\n              connectable: true,\n              type: transfer.type,\n              id: v4(),\n              position: { x: round(pos.x), y: round(pos.y) },\n            };\n\n            addWorkflowElement(workflowNode);\n          }\n        }\n      }}\n    >\n      <ReactFlow\n        elements={elements}\n        className={props.className}\n        onMove={updateLocation}\n        selectNodesOnDrag={false}\n        nodeTypes={getTypes()}\n        snapToGrid={true}\n      >\n        <Background\n          variant={BackgroundVariant.Dots}\n          gap={gap}\n          color=\"#A3A3A3\"\n          className={props.bgClassName}\n          size={1}\n        />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default WorkflowPane;\n","import { Tab, TabList, TabPanel, Tabs } from 'react-tabs';\nimport { useStoreActions, useStoreState } from '../../state/Hooks';\nimport WorkflowPane from '../containers/WorkflowContainer';\n\nconst WorkflowsTabbed = () => {\n  const workflows = useStoreState((state) => state.workflows);\n  const addWorkflow = useStoreActions((actions) => actions.addWorkflow);\n  const selectWorkflow = useStoreActions((actions) => actions.selectWorkflow);\n\n  return (\n    <Tabs\n      className=\"w-full h-full flex flex-col bg-white\"\n      onSelect={(index) => selectWorkflow(index)}\n    >\n      <TabList className=\"inline-flex pl-2 pt-2\">\n        {workflows?.map((workflow) => (\n          <Tab\n            key={workflow.id}\n            className=\"bg-circle-gray-200 w-max rounded-t-lg p-2 mr-2 cursor-pointer\"\n          >\n            <div className=\"flex flex-row h-5\">\n              <svg className=\"w-8\">\n                <path d=\"M13,12.0005 L13,14.5005 C13,15.8812153 14.1192847,17.0005 15.5,17.0005 C16.7716732,17.0005 17.8215783,16.0510253 17.9794794,14.8223119 C16.8252603,14.4045443 16,13.2985065 16,12.0005 C16,10.3434832 17.3434471,9.0005 19,9.0005 C20.6565529,9.0005 22,10.3434832 22,12.0005 C22,13.3107265 21.1591278,14.4253528 19.9878345,14.8339277 C19.8172144,17.1635097 17.8731367,19.0005 15.5,19.0005 C13.0147153,19.0005 11,16.9857847 11,14.5005 L11,12.0005 L11,9.4995 C11,8.11906389 9.88099443,7.0005 8.5,7.0005 C7.2278041,7.0005 6.17794274,7.94975945 6.020417,9.17853139 C7.17480406,9.5960731 8,10.7018409 8,12.0005 C8,13.6567847 6.65628475,15.0005 5,15.0005 C3.34371525,15.0005 2,13.6567847 2,12.0005 C2,10.6896797 2.84072326,9.57538027 4.01209968,9.16698275 C4.18228055,6.83714058 6.12646259,5.0005 8.5,5.0005 C10.9853872,5.0005 13,7.0143176 13,9.4995 L13,12.0005 Z M6,12.0005 C6,11.4482074 5.55213797,11.0005 5,11.0005 C4.44786203,11.0005 4,11.4482074 4,12.0005 C4,12.5522153 4.44828475,13.0005 5,13.0005 C5.55171525,13.0005 6,12.5522153 6,12.0005 Z M20,12.0005 C20,11.4482074 19.552138,11.0005 19,11.0005 C18.447862,11.0005 18,11.4482074 18,12.0005 C18,12.5522153 18.4482847,13.0005 19,13.0005 C19.5517153,13.0005 20,12.5522153 20,12.0005 Z\"></path>\n              </svg>\n              <p className=\"text-lg\">{workflow.name}</p>\n            </div>\n          </Tab>\n        ))}\n        <button\n          className=\"bg-circle-blue transition-colors hover:bg-circle-blue-light text-white w-10 text-2xl rounded-t-lg p-1 mr-2 cursor-pointer\"\n          onClick={(e) => addWorkflow('new-workflow')}\n        >\n          +\n        </button>\n      </TabList>\n\n      {workflows?.map((workflow) => (\n        <TabPanel key={workflow.id} selectedClassName=\"flex-grow mr-4\">\n          <WorkflowPane\n            workflow={workflow}\n            bgClassName=\"bg-circle-gray-200\"\n            className=\"ml-2 border-2 border-b-0 border-circle-gray-300\"\n          />\n        </TabPanel>\n      ))}\n    </Tabs>\n  );\n};\n\nexport default WorkflowsTabbed;\n","import { Config, Job, Workflow } from '@circleci/circleci-config-sdk';\nimport { Command } from '@circleci/circleci-config-sdk/dist/src/lib/Components/Commands/Command';\nimport { ParameterTypes } from '@circleci/circleci-config-sdk/dist/src/lib/Config/Parameters';\nimport { PipelineParameter } from '@circleci/circleci-config-sdk/dist/src/lib/Config/Pipeline';\nimport { Action, action } from 'easy-peasy';\nimport { Elements, FlowElement, isNode } from 'react-flow-renderer';\nimport { v4 } from 'uuid';\nimport ComponentMapping from '../mappings/ComponentMapping';\nimport { ReusableExecutor } from '../mappings/ExecutorMapping';\n\nexport interface WorkflowModel {\n  name: string;\n  id: string;\n  elements: Elements<any>;\n}\n\n/** Reusable defintions of CircleCIConfigObject */\nexport interface DefinitionModel /*extends CircleCIConfigObject*/ {\n  parameters: PipelineParameter<ParameterTypes>[];\n  executors: ReusableExecutor[];\n  jobs?: Job[];\n  commands?: Command[];\n  workflows?: Workflow[];\n}\n\nexport interface InspectModel {\n  data?: any;\n  dataType?: ComponentMapping | undefined;\n  values?: any;\n  mode: 'creating' | 'editing' | 'none';\n}\n\nexport interface StoreModel {\n  /** Last generated configuration */\n  config: Config | undefined;\n  /** Last generated configuration */\n  definitions: DefinitionModel;\n  /** Array of workflow panes */\n  workflows: WorkflowModel[];\n  /** Instance of inspector */\n  inspecting: InspectModel;\n  /** Currently selected workflow pane index */\n  selectedWorkflow: number;\n}\n\nexport interface UpdateType<T> {\n  old: T;\n  new: T;\n}\n\nexport interface StoreActions {\n  inspect: Action<StoreModel, InspectModel | undefined>;\n\n  addWorkflow: Action<StoreModel, string>;\n  selectWorkflow: Action<StoreModel, number>;\n  removeWorkflow: Action<StoreModel, WorkflowModel>;\n\n  addWorkflowElement: Action<StoreModel, FlowElement<any>>;\n  removeWorkflowElement: Action<StoreModel, FlowElement<any>>;\n  setWorkflowElements: Action<StoreModel, Elements<any>>;\n\n  defineJob: Action<StoreModel, Job>;\n  updateJob: Action<StoreModel, UpdateType<Job>>;\n\n  /** @todo implement job removal */\n  undefineJob: Action<StoreModel, Job>;\n\n  /** @todo implement commands */\n  // defineCommand: Action<StoreModel, Command>;\n  // undefineCommand: Action<StoreModel, Command>;\n\n  defineExecutor: Action<StoreModel, ReusableExecutor>;\n  updateExecutor: Action<StoreModel, UpdateType<ReusableExecutor>>;\n  undefineExecutor: Action<StoreModel, ReusableExecutor>;\n\n  /** @todo implement parameters */\n  // defineParameter: Action<StoreModel, PipelineParameter<ParameterTypes>>;\n  // undefineParameter: Action<StoreModel, PipelineParameter<ParameterTypes>>;\n\n  generateConfig: Action<StoreModel, Config>;\n  error: Action<StoreModel, any>;\n}\n\nconst Actions: StoreActions = {\n  inspect: action((state, payload) => {\n    state.inspecting = {\n      mode: 'none',\n      data: undefined,\n      dataType: undefined,\n      ...payload,\n    };\n  }),\n\n  addWorkflow: action((state, name) => {\n    state.workflows = state.workflows.concat({ name, id: v4(), elements: [] });\n  }),\n  selectWorkflow: action((state, index) => {\n    state.selectedWorkflow = index;\n  }),\n  removeWorkflow: action((state, payload) => {\n    state.workflows = state.workflows.filter(\n      (workflow) => workflow.id !== payload.id,\n    );\n  }),\n\n  addWorkflowElement: action((state, payload) => {\n    const workflow = state.workflows[state.selectedWorkflow];\n\n    workflow.elements.push(payload);\n  }),\n  removeWorkflowElement: action((state, payload) => {}),\n  setWorkflowElements: action((state, payload) => {\n    state.workflows[state.selectedWorkflow].elements = payload;\n  }),\n\n  defineJob: action((state, payload) => {\n    state.definitions.jobs?.push(payload);\n  }),\n  updateJob: action((state, payload) => {\n    if (state.definitions.jobs) {\n      const workflows = state.workflows[state.selectedWorkflow];\n\n      workflows.elements = workflows.elements.map((e) =>\n        isNode(e) && e.type === 'job' && e.data.job.name === payload.old.name\n          ? { ...e, data: { ...e.data, job: payload.new } }\n          : e,\n      );\n\n      state.definitions.jobs = state.definitions.jobs.map((job) =>\n        job.name === payload.old.name ? payload.new : job,\n      );\n    }\n  }),\n  undefineJob: action((state, payload) => {\n    state.definitions.jobs = state.definitions.jobs?.filter(\n      (job) => job.name === payload.name,\n    );\n  }),\n\n  defineExecutor: action((state, payload) => {\n    state.definitions.executors = state.definitions.executors?.concat(payload);\n  }),\n  /** @todo fix updating executors since reusable executors have been removed.*/ \n  updateExecutor: action((state, payload) => {\n    if (state.definitions.executors) {\n      // const index = state.definitions.executors.findIndex((executor) => executor.name === payload.name)\n      // state.definitions.executors[index] = payload;\n    }\n  }),\n  undefineExecutor: action((state, payload) => {\n    state.definitions.jobs?.filter(\n      (executor) => executor.name !== payload.name,\n    );\n  }),\n\n  // defineParameter: action((state, payload) => {}),\n  // undefineParameter: action((state, payload) => {}),\n\n  error: action((state, payload) => {\n    console.error('An action was not found! ', payload);\n  }),\n\n  generateConfig: action((state, payload) => {\n    state.config = payload;\n  }),\n};\n\nconst Store: StoreModel & StoreActions = {\n  inspecting: { mode: 'none' },\n  selectedWorkflow: 0,\n  config: undefined,\n  definitions: {\n    commands: [],\n    executors: [],\n    jobs: [],\n    workflows: [],\n    parameters: [],\n  },\n  workflows: [{ name: 'build-and-test', elements: [], id: v4() }],\n  ...Actions,\n};\n\nexport default Store;\n","import { createStore, StoreProvider } from 'easy-peasy';\nimport SplitPane from 'react-split-pane';\nimport CreateNew from './components/containers/CreateNewContainer';\nimport DefinitionsPane from './components/panes/DefinitionsPane';\nimport EditorPane from './components/panes/EditorPane';\nimport WorkflowsTabbed from './components/panes/WorkflowsPane';\nimport Store from './state/Store';\n\nconst App = () => {\n  return (\n    <StoreProvider store={createStore(Store)}>\n      <CreateNew />\n      <SplitPane\n        split=\"vertical\"\n        defaultSize=\"75%\"\n        className=\"bounds bg-circle-gray-300\"\n        resizerClassName=\"z-0 w-1 h-full transition duration-500  hover:bg-circle-blue-light cursor-ew-resize\"\n      >\n        <SplitPane\n          split=\"horizontal\"\n          defaultSize=\"70%\"\n          minSize=\"20%\"\n          resizerClassName=\"pt-1 flex-col cursor-ns-resize transition duration-500 hover:bg-circle-blue-light\"\n        >\n          <WorkflowsTabbed />\n          <EditorPane />\n        </SplitPane>\n        <DefinitionsPane />\n      </SplitPane>\n    </StoreProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}